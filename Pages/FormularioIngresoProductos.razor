@page "/ingreso-producto"
@using puntodeventa.Models
@using puntodeventa.Data
@using puntodeventa.Services
@using System.ComponentModel.DataAnnotations
@inject ProductosService productosService
@inject ApplicationDbContext context
<h3>Ingresar nuevo producto</h3>

<EditForm Model="nuevoProducto" OnValidSubmit="AgregarProductos">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="form-container">
        <div class="form-group">
            <label for="pcodigo">Código del producto:</label>
            <InputText id="pcodigo" class="form-control" @bind-Value="nuevoProducto.Pcodigo"></InputText>
        </div>
        <div class="form-group">
            <label for="nombre">Nombre del producto:</label>
            <InputText id="nombre" class="form-control" @bind-Value="nuevoProducto.Nombre"></InputText>
        </div>
        <div class="form-group">
            <label for="precio">Precio:</label>
            <InputNumber id="precio" class="form-control" @bind-Value="nuevoProducto.Precio"></InputNumber>
        </div>
        <div class="form-group">
            <label for="fechavenci">Fecha de vencimiento:</label>
            <InputDate id="fechavenci" class="form-control" @bind-Value="nuevoProducto.Fechavenci"></InputDate>
        </div>
        <div class="form-group">
            <label for="cantidad">Cantidad a ingresar:</label>
            <InputNumber id="cantidad" class="form-control" @bind-Value="nuevoProducto.Cantidad"></InputNumber>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-primary">Agregar producto</button>
        </div>
    </div>
</EditForm>
@code {
    private Productos nuevoProducto = new Productos();

    private async Task AgregarProductos()
    {

        nuevoProducto.Fechain = DateTime.Now;
        nuevoProducto.Categoryid = 1;
        nuevoProducto.Precioiva = 1;
        Console.WriteLine(nuevoProducto);
        context.polls_productos.Add(nuevoProducto);
        await productosService.AddProductos(nuevoProducto);
        nuevoProducto = new Productos();
    }
    public class Producto
    {
        [Required(ErrorMessage = "El código del producto es obligatorio.")]
        public string Pcodigo { get; set; } = string.Empty;

        [Required(ErrorMessage = "El nombre del producto es obligatorio.")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El precio es obligatorio.")]
        [Range(0, int.MaxValue, ErrorMessage = "El precio debe ser un valor positivo.")]
        public int Precio { get; set; }

        [Required(ErrorMessage = "La fecha de vencimiento es obligatoria.")]
        public DateTime? Fechavenci { get; set; }

        [Required(ErrorMessage = "La cantidad es obligatoria.")]
        [Range(0, int.MaxValue, ErrorMessage = "La cantidad debe ser un valor positivo.")]
        public int Cantidad { get; set; }
    }
}
<style>
    .form-container {
        max-width: 600px;
        margin: 0 auto;
        padding: 20px;
        background-color: #f9f9f9;
        border: 1px solid #ccc;
        border-radius: 10px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        box-sizing: border-box;
        border: 1px solid #ccc;
        border-radius: 5px;
    }

    .btn-primary {
        background-color: #007bff;
        border: none;
        color: white;
        padding: 10px 20px;
        text-align: center;
        text-decoration: none;
        display: inline-block;
        font-size: 16px;
        margin: 4px 2px;
        cursor: pointer;
        border-radius: 5px;
    }

        .btn-primary:hover {
            background-color: #0056b3;
        }
</style>